{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_30-d3c32aecbd28cf781bfce0c7b51ba04849527bac",
  "solcVersion": "0.8.30",
  "solcLongVersion": "0.8.30+commit.73712a01",
  "userSourceNameMap": {
    "contracts/CryptAid.sol": "project/contracts/CryptAid.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "prague",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/CryptAid.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nstruct Campaign {\n    address author;\n    string title;\n    string description;\n    string videoUrl;\n    string imageUrl;\n    uint256 balance;\n    bool active;\n}\n\ncontract CryptAid {\n    uint256 public constant fee = 100;\n    uint256 public nextId = 0;\n\n    mapping(uint256 => Campaign) public campaings;\n\n    event Withdrawn(\n        uint256 indexed id,\n        uint256 amount,\n        address indexed recipient\n    );\n\n    function addCampaign(\n        string calldata title,\n        string calldata description,\n        string calldata videoUrl,\n        string calldata imageUrl\n    ) public {\n        Campaign memory newCampaign = Campaign({\n            author: msg.sender,\n            title: title,\n            description: description,\n            videoUrl: videoUrl,\n            imageUrl: imageUrl,\n            balance: 0,\n            active: true\n        });\n\n        nextId++;\n        campaings[nextId] = newCampaign;\n    }\n\n    function donate(uint256 id) public payable {\n        require(campaings[id].active, \"Campaign is not active\");\n        require(msg.value > 0, \"Amount must be greater than 0\");\n\n        campaings[id].balance += msg.value;\n    }\n\n    function withdraw(uint256 id) public {\n        Campaign storage campaign = campaings[id];\n\n        require(campaign.active, \"This campaign is closed\");\n        require(\n            campaign.author == msg.sender,\n            \"You do not have permission to withdraw\"\n        );\n        require(\n            campaign.balance > fee,\n            \"This campaign does not have enough balance\"\n        );\n\n        uint256 amount = campaign.balance - fee;\n\n        campaign.balance = 0;\n        campaign.active = false;\n\n        (bool success, ) = payable(campaign.author).call{value: amount}(\"\");\n        require(success, \"Failed to send Ether\");\n\n        emit Withdrawn(id, amount, campaign.author);\n    }\n}"
      }
    }
  }
}